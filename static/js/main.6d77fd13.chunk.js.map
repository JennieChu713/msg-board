{"version":3,"sources":["components/App/App.js","reportWebVitals.js","index.js"],"names":["Page","styled","div","Title","h1","MessageForm","form","MessageNickname","input","MessageTextArea","textarea","SubmitButton","button","MessageList","MessageContainer","article","MessageHead","MessageAuthor","MessageTime","MessageContent","Loading","Message","author","time","children","ErrorMessage","App","useState","messages","setMessages","messageApiError","setMessageApiError","value","setValue","nickname","setNickname","postMessageError","setPostMessageError","isLoadingPostMessage","setIsLoadingPostMessage","fetchMessages","fetch","then","res","json","data","catch","err","message","handleFormFocus","useEffect","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","ok","onChange","target","placeholder","onFocus","rows","toString","map","Date","createdAt","toLocaleString","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d77fd13.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n// import PropTypes fomr \"prop-types\";\n\nconst API_ENDPOINT =\n  \"https://student-json-api.lidemy.me/comments?_sort=createdAt&_order=desc&_limit=3\";\n\n//css styled elements\nconst Page = styled.div`\n  width: 360px;\n  margin: 0 auto;\n  text-align: center;\n  padding: 0 3% 2%;\n`;\nconst Title = styled.h1`\n  color: #333;\n`;\nconst MessageForm = styled.form``;\nconst MessageNickname = styled.input`\n  margin-bottom: 2%;\n  width: 100%;\n`;\nconst MessageTextArea = styled.textarea`\n  display: block;\n  width: 100%;\n`;\nconst SubmitButton = styled.button`\n  margin-top: 8px;\n`;\n\nconst MessageList = styled.div`\n  margin-top: 16px;\n`;\nconst MessageContainer = styled.article`\n  border: 1px solid black;\n  padding: 8px 16px;\n  border-radius: 8px;\n\n  & + & {\n    margin-top: 16px;\n  }\n`;\nconst MessageHead = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-bottom: 5px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.3);\n`;\nconst MessageAuthor = styled.div``;\nconst MessageTime = styled.div`\n  font-style: oblique;\n`;\nconst MessageContent = styled.div`\n  margin-top: 16px;\n  font-size: 16px;\n`;\nconst Loading = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  font-size: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nfunction Message({ author, time, children }) {\n  return (\n    <MessageContainer>\n      <MessageHead>\n        <MessageAuthor>{author}</MessageAuthor>\n        <MessageTime>{time}</MessageTime>\n      </MessageHead>\n      <MessageContent>{children}</MessageContent>\n    </MessageContainer>\n  );\n}\n\nconst ErrorMessage = styled.div`\n  border: 1px solid red;\n  font-size: 1.5rem;\n  margin: 4% auto;\n`;\n\n// Message.propTypes = {\n//   author: PropTypes.string,\n//   time: PropTypes.string,\n//   children: PropTypes.node\n// }\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [messageApiError, setMessageApiError] = useState(null);\n  const [value, setValue] = useState();\n  const [nickname, setNickname] = useState();\n  const [postMessageError, setPostMessageError] = useState(null);\n  const [isLoadingPostMessage, setIsLoadingPostMessage] = useState(false);\n\n  const fetchMessages = () => {\n    return fetch(API_ENDPOINT)\n      .then((res) => res.json())\n      .then((data) => {\n        setMessages(data);\n      })\n      .catch((err) => setMessageApiError(err.message));\n  };\n\n  const handleTextAreaChange = (e) => {\n    setValue(e.target.value);\n  };\n  const handleNicknameChange = (e) => {\n    setNickname(e.target.value);\n  };\n  const handleFormFocus = () => {\n    setPostMessageError(null);\n  };\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (isLoadingPostMessage) {\n      return;\n    }\n    setIsLoadingPostMessage(true);\n    fetch(\"https://student-json-api.lidemy.me/comments\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        nickname: nickname,\n        body: value,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setIsLoadingPostMessage(false);\n        if (data.ok === 0) {\n          setPostMessageError(data.message);\n          return;\n        }\n        setValue(\"\");\n        setNickname(\"\");\n        fetchMessages();\n      })\n      .catch((err) => {\n        setIsLoadingPostMessage(false);\n        setPostMessageError(err.message);\n      });\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  return (\n    <Page>\n      {isLoadingPostMessage && <Loading>Loading...</Loading>}\n      <Title>Message Board</Title>\n      <MessageForm onSubmit={handleFormSubmit}>\n        <MessageNickname\n          nickname={nickname}\n          onChange={handleNicknameChange}\n          placeholder={\"nickname\"}\n          onFocus={handleFormFocus}\n        />\n        <MessageTextArea\n          value={value}\n          onChange={handleTextAreaChange}\n          onFocus={handleFormFocus}\n          rows={10}\n          placeholder={\"comment\"}\n        />\n        <SubmitButton>send</SubmitButton>\n        {postMessageError && <ErrorMessage>{postMessageError}</ErrorMessage>}\n      </MessageForm>\n      {messageApiError && (\n        <ErrorMessage>\n          something went wrong. {messageApiError.toString()}\n        </ErrorMessage>\n      )}\n      <MessageList>\n        {messages.map((message) => (\n          <Message\n            key={message.id}\n            author={message.nickname}\n            time={new Date(message.createdAt).toLocaleString()}\n          >\n            {message.body}\n          </Message>\n        ))}\n      </MessageList>\n    </Page>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}